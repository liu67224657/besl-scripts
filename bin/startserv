#!/usr/bin/perl

#inmplort packages;
BEGIN { push @INC, '/opt/ops/bin' }
use Runtime;

##################################
# Variables for debugging        #
##################################
$debugEnabled = "0";
$debugPort = "5005";
$rotlogFlag=$ENV{"ROTLOG"};

#################################
# Process the command-line args #
#################################
if (scalar(@ARGV) < 1)
{
	usage();
}

while ($ARGV[0] =~ /^-{1}\w*/)
{
	if ($ARGV[0] eq '-debug')	
	{
		$debugEnabled = "1";
		shift @ARGV;
	}
	elsif ($ARGV[0] eq '-debugport')	
	{
		if (scalar(@ARGV) < 2)
		{
			usage();
		}
		
		if ($ARGV[1] =~ /[0123456789]+/)
		{
			$debugPort = $ARGV[1];
		}
		else		
		{
			usage();
		}
		
		shift @ARGV;
		shift @ARGV;
	}
	else
	{
		usage();
	}
}

#######################
# Setup the CLASSPATH #
#######################
$cp = `cpprod`;

if (scalar(@ARGV) < 1)
{
	usage();
}

chomp $cp;
$ENV{"CLASSPATH"} = $cp;
$serviceName = $ARGV[0];

$ENV{"IM4JAVA_TOOLPATH"} = "/usr/local/GraphicsMagick/bin";
$ENV{"LC_ALL"} = "zh_CN.UTF-8";

#################################################################
# make sure that the directory for the requested server exists: #
#################################################################
$serviceDir = $SERVICE_RUN_ROOT . "/$serviceName";
chdir $serviceDir or die "can't access $serviceDir - $!\n";

#########################################
# see if the server is already running: #
#########################################
@procs = matchingProcs($serviceName);
if (scalar(@procs))
{
	die "\nERROR: $serviceName already running on $host.\n\nProcess looks like:\n@procs\n";
}


###################################################
# if we're not in dev mode or the ROTLOG env var
# has been set, rotate the log files.
###################################################
system("rotlog $serviceName");

##############################################
# start server, piping output to a log file: #
##############################################
open ALIASFILE, "alias" or die "can't open alias file - $!\n";
$alias = <ALIASFILE>;
close ALIASFILE;

# args file is optional - treat as the empty string if missing
if (open ARGSFILE, "args")
{
	$args = <ARGSFILE>;
	chomp $args;
	close ARGSFILE;
}

# command is everything after the second word
($cmd) = ($alias =~ m/^\s*\S+\s+\S+\s+(.*)$/);

# remove leading or trailing quotes
$cmd =~ s/^\s*('|")+//;
$cmd =~ s/('|")+\s*$//;

# do a primitive form of substitution
$cmd =~ s/\`cat args\`/$args/;		# put in the args if present

# Remove any -server option, if present.  This is added back later.
$cmd =~ s/\s-server\s/ /i;


# Stick a process name tag in the command for later ps grepping.
# Also add the -server option, which must be first.
if (! $debugEnabled)
{
	$cmd =~ s/^(\s*\S+)(\s+)/$1 -server -verbose:gc -XX:+PrintGCDetails -XX:+PrintGCTimeStamps -XX:+UseConcMarkSweepGC -XX:CMSFullGCsBeforeCompaction=5 -XX:+UseCMSCompactAtFullCollection -Dea.proc=$serviceName /;
}
else
{
	$debugStr = "-Xdebug -Xnoagent -Djava.compiler=NONE -Xrunjdwp\:transport=dt_socket,server=y,suspend=n,address=$debugPort";
	$cmd =~ s/^(\s*\S+)(\s+)/$1 $debugStr -Dea.proc=$serviceName /;
}

$logLines = 200000;

open CMDFILE, ">cmd" or die "can't write command - $!\n";
print CMDFILE "($cmd";
print CMDFILE " |& logfile $serviceName $logLines)";
print CMDFILE " >& /dev/null &\n";
close CMDFILE;

print "$cmd\n";
system("/bin/csh -f cmd $serviceName");			# name is to ensure we get something in the proc list


##########
# usage: #
##########
sub usage()
{
	print "\nUSAGE: startserv [-debug] [-debugport 5005] <servername>\n";
	print "\n       [-debug] enable remote debugging";
	print "\n       [-debugport 5005] assign remote debugging port (default: 5005)";
	print "\n       <servername> the name of the server to start (e.g. roomserver)";	
	print "\n\n";
	exit 1;
}

